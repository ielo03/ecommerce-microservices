services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecommerce
      MYSQL_USER: ecommerce
      MYSQL_PASSWORD: ecommerce
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p$$MYSQL_ROOT_PASSWORD",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    restart: always
    ports:
      - "8081:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ecommerce
      DB_USERNAME: ecommerce
      DB_PASSWORD: ecommerce
      LOG_LEVEL: debug
      LOG_FORMAT: console
      JWT_SECRET: your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    # Remove volume mounts to prevent overriding node_modules

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    restart: always
    ports:
      - "8082:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ecommerce
      DB_USERNAME: ecommerce
      DB_PASSWORD: ecommerce
      PRODUCT_SERVICE_URL: http://product-service:8080
      USER_SERVICE_URL: http://user-service:8080
      LOG_LEVEL: debug
      LOG_FORMAT: console
      JWT_SECRET: your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
      product-service:
        condition: service_started
      user-service:
        condition: service_started
    volumes:
      - ./order-service:/app
      - /app/node_modules

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    restart: always
    ports:
      - "8083:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ecommerce
      DB_USERNAME: ecommerce
      DB_PASSWORD: ecommerce
      JWT_SECRET: your-secret-key
      JWT_EXPIRES_IN: 1d
      LOG_LEVEL: debug
      LOG_FORMAT: console
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./user-service:/app
      - /app/node_modules

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    restart: always
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      PRODUCT_SERVICE_URL: http://product-service:8080
      ORDER_SERVICE_URL: http://order-service:8080
      USER_SERVICE_URL: http://user-service:8080
      JWT_SECRET: your-secret-key
      LOG_LEVEL: debug
      LOG_FORMAT: console
    depends_on:
      - product-service
      - order-service
      - user-service
    volumes:
      - ./api-gateway:/app
      - /app/node_modules

volumes:
  mysql-data:
